#!/usr/bin/env python

from __future__ import print_function
import yaml
import os
import sys
from challenge import verify_result
from docker_cmd import output_from_cmd, DockerValidationError


def main(challenge_name):
    ret = 0
    script_dir = os.path.abspath(os.path.dirname(__file__))
    y = yaml.load(open(os.path.join(script_dir, "..", "challenges.yaml")).read())

    for challenge in y:
        if challenge_name and challenge['slug'] != challenge_name:
            continue
        d = challenge['slug']
        cmd = challenge['example']
        print(d, end="")
        print("\t`{}`".format(cmd), end="")
        try:
            result = output_from_cmd(cmd, challenge)
        except DockerValidationError as e:
            ret = 1
            print(u"\t\x1b[1;31;40m\u2718\x1b[0m", end="")
            print(u"\t\x1b[0;35;40mError: {}\x1b[0m".format(e.message))
            continue
        # All examples should return an exit code of zero
        exit_ok = result['CmdExitCode'] == 0
        correct = verify_result(result)
        if not (exit_ok and correct):
            ret = 1
            print(u"\t\x1b[1;31;40m\u2718\x1b[0m", end="")
            print(u"\t\x1b[0;35;40m{}\x1b[0m".format(result['CmdOut'].decode('utf-8').rstrip()))
            if 'TestsOut' in result:
                print(u"\t\x1b[0;35;40m{}\x1b[0m".format(result['TestsOut'].decode('utf-8').rstrip()))
            continue
        print(u"\t\x1b[1;32;40m\u2713\x1b[0m", end="")
        print("\t", end="")
        print("")
    return ret


if __name__ == '__main__':
    challenge = None
    if len(sys.argv) == 2:
        challenge = sys.argv[1]
    sys.exit(main(challenge))
